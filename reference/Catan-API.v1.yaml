openapi: 3.0.0
info:
  title: Catan API
  version: '1.0'
  description: This is the API specification for the REST Interface in the Catan/Toucan Game
  contact:
    name: Sopra Group 16
servers:
  - url: '{{baseUrl}}'
    description: BaseUrl
paths:
  /users:
    get:
      summary: GET /users
      responses:
        '200':
          description: OK - Returns an array of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      operationId: get-users
      description: Returns all the users currently in the database
      tags:
        - /users
    post:
      summary: POST /users
      operationId: post-users
      responses:
        '201':
          description: Created - The user was created successfully and the token is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          headers:
            Location:
              schema:
                type: string
              description: The header contains the location of the created resource
        '409':
          description: Conflict - There exists already a user with this username
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      description: Adds a user to the database and returns the new users login token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentials'
            examples: {}
        description: The chosen username and password of the new user wrapped in a UserCredentials object
      tags:
        - /users
  '/users/{userId}':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        description: The Id of the user
        required: true
    get:
      summary: GET /users/userId
      responses:
        '200':
          description: OK - The user with the userId exists and the user is returned
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Not Found - There is no user with this userId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-users-userId
      description: Returns the user if it is in the database
      parameters: []
      tags:
        - /users
  /login:
    put:
      summary: PUT /login
      operationId: put-login
      responses:
        '200':
          description: OK - User is logged in correctly and the token is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '401':
          description: Unauthorized - the login credentials where wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      description: Takes the user credentials wrapped in a UserCredentials object and returns the login token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentials'
        description: The request body contains username and password
      tags:
        - /login
  /games:
    get:
      summary: GET /games
      responses:
        '200':
          description: 'OK - Returns games array '
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GameLink'
              examples: {}
        '401':
          description: Unauthorized - the user is not authenticated and needs a valid token to perform the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-games
      description: Returns the Ids and links for all available games
      tags:
        - /games
      parameters:
        - schema:
            type: string
          in: header
          name: Token
          description: This header holds the token of the requesting user
    post:
      summary: POST /games
      operationId: post-games
      responses:
        '201':
          description: Created - Game is successfully created and gameId and url are returned
          headers:
            Location:
              schema:
                type: string
              description: The header contains the location of the created resource
        '401':
          description: Unauthorized - The token passed is not valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '503':
          description: Service Unavailable - If the game creation fails on the server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      description: Creates a new game on the server and returns gameId and game url
      parameters:
        - schema:
            type: string
          in: header
          name: Token
          description: The users token
      tags:
        - /games
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GamePost'
        description: The Body holds the new game object and the users token to authenticate it
  '/games/{gameId}':
    parameters:
      - schema:
          type: string
        name: gameId
        in: path
        required: true
    get:
      summary: GET /games/gamesId
      responses:
        '200':
          description: OK - Game exists and the game is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        '401':
          description: Unauthorized - The user has no valid token
        '403':
          description: Forbidden - The user does not possess a valid token for this game instance but is logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found - there is no game with this Id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-games-gamesId
      description: Returns the entire game state of the game with the given Id. This is the endpoint used for polling during the game. Requires user token to check access permission
      tags:
        - /games
      parameters:
        - schema:
            type: string
          in: header
          name: Token
          description: This header holds the token of the requesting user
    post:
      summary: POST /games/gamesId
      operationId: post-games-gameId
      responses:
        '202':
          description: Accepted - The post request was valid and the operation was performed
        '401':
          description: 'Unauthorized - The user has no valid token '
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - the user that posted is not permitted to perform the operation or the game id is not a legal operation (anymore)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found - The game that was posted to does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      description: This is the endpoint for all game related operations such as moves and trading. The game object recieved with the get request is responsible for providing the possible operations
      tags:
        - /games
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GameOperation'
        description: The request includes the users token to ensure that only the authorized user can perform the operation and the operations Id that the server generated to identify the available operation
      parameters:
        - schema:
            type: string
          in: header
          name: Token
          description: The users token
components:
  schemas:
    User:
      title: User
      type: object
      description: This is the user as it is returned by the server
      x-tags:
        - Response Object
      properties:
        userId:
          type: integer
        username:
          type: string
        status:
          type: string
    Game:
      title: Game
      type: object
      description: The game object as it is returned by the server
      x-tags:
        - Response Object
      properties:
        gameId:
          type: integer
          description: The Id of the game
        players:
          type: array
          description: An array containing the players
          items:
            $ref: '#/components/schemas/User'
        withBots:
          type: boolean
        name:
          type: string
    Error:
      title: Error
      type: object
      x-tags:
        - Response Object
      description: This is the error that is returned from the server. It is generated by trowing a RestException
      properties:
        errorMessage:
          type: string
        error:
          type: object
          description: An object containing the servers ErrorDTO
    GameLink:
      title: GameLink
      type: object
      description: The GameLink object is an array object when a GET request is sent to /games
      properties:
        gameId:
          type: integer
          description: The gameId
        url:
          type: string
          description: The link that directs to the game
    UserCredentials:
      title: UserCredentials
      type: object
      description: The username and password of a user. Can be used to log in or to create a new user Translates to UserPostDTO on server side
      properties:
        username:
          type: string
          description: the username of the user
        password:
          type: string
          description: the password of the user
    GamePost:
      title: GamePost
      type: object
      description: The object containing a game with all initial field and the user token used for authentication
      properties:
        name:
          type: string
          description: The name of the game
        withBots:
          type: boolean
          description: |
            Bots enabled or disabled
    GameOperation:
      title: Move
      type: object
      description: 'The object holding token and operation Id '
      properties:
        moveId:
          type: number
          description: the Id of the operation that can be performed
        token:
          type: string
          description: The token of the user performing the operation
    Token:
      title: Token
      type: object
      properties:
        token:
          type: string
      description: This object holds the string token in the instances it is used on its own either as a response or request body
  securitySchemes: {}
