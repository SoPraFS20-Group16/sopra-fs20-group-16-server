openapi: 3.0.0
info:
  title: Catan API
  version: '1.0'
  description: This is the API specification for the REST Interface in the Catan/Toucan Game
servers:
  - url: 'http://localhost:8080'
    description: Local
paths:
  /users:
    get:
      summary: GET /users
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    description: The array containing all users
                    items: {}
      operationId: get-users
      description: Returns all the users currently in the database
      parameters: []
    post:
      summary: POST /users
      operationId: post-users
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
      description: Adds a user to the database and returns the new users login token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: Object describing new user
              properties:
                username:
                  type: string
                  description: The users username
                password:
                  type: string
                  description: The users password
            examples: {}
  '/users/{userId}':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
        description: The Id of the user
    get:
      summary: GET /users/userId
      tags: []
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                description: The user with the corresponding id
      operationId: get-users-userId
      description: Returns the user if it is in the database
      parameters:
        - schema:
            type: string
          in: query
          name: userId
          description: |
            The Id of the requested User
  /login:
    put:
      summary: PUT /login
      operationId: put-login
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
      description: Takes the user credentials and returns the login token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: ''
              properties:
                username:
                  type: string
                  description: The username
                password:
                  type: string
                  description: The users password
        description: The request body contains username and password
  /games:
    get:
      summary: GET /games
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  games:
                    type: array
                    items:
                      type: object
                      properties:
                        gameId:
                          type: string
                        url:
                          type: string
              examples: {}
      operationId: get-games
      description: Returns the Ids and links for all available games
      requestBody: {}
    post:
      summary: POST /games
      operationId: post-games
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                description: returns game Id and game url
                properties:
                  gameId:
                    type: string
                  url:
                    type: string
      description: Creates a new game on the server and returns gameId and game url
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
components:
  schemas: {}
  securitySchemes: {}
